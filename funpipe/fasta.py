import os
import sys
from funpipe.picard import picard
from funpipe.utils import run
# from plumbum import local
# from plumbum.cmd import wget
# import configparser


class fasta:
    def __init__(self,path):
        '''

        Parameters
        ----------
        path: string
            The path to fasta file.
        
        Attributes
        ----------
        path: string
            The path to fasta file.      
        picard_index: string
            The path to dict file generated by Picard-tools.    
        bwa_index: string
            The path to index file generated by bwa.   
        samtools_index:string
            The path to index file generated by samtools.
        
        Examples
        --------
        >>> from funpipe.fasta import fasta
        >>> fasta = fasta( 'ref.fasta' )
        Index fasta file with bwa and samtools:
        >>> fasta.bwa_index_fa().samtools_index_fa()
        Index fasta file with bwa, samtools and picard:
        >>> fasta.index_fa()

        '''
        if os.path.exists(path):
            self.path = path
        else:
            raise Exception("Sorry, input fasta file does not exist")
        
        self.picard_index = None
        self.bwa_index = None
        self.samtools_index =None
        
    def bwa_index_fa(self):
        ''' Index a fasta file in place using bwa.
        
        Returns
        -------
        funpipe.fasta
            An updated fasta object with ".bwt" generated.
            
        '''
        run('bwa index '+self.path)
        self.bwa_index = self.path + '.bwt'
        
        return self


    def samtools_index_fa(self):
        ''' Index a fasta file in place using samtools.
        
        Returns
        -------
        funpipe.fasta
            An updated fasta object with ".fai" generated.
            
        '''
        run('samtools faidx '+self.path)
        self.samtools_index = self.path + '.fai'
        
        return self


    def index_fa(self,jar_path):
        ''' Index fasta file with common genomic tools.
        
        Parameters
        ----------
        jar_path: string
            The path to picard tools, default = '/opt/picard-tools/picard.jar'.
            
        Returns
        -------
        funpipe.fasta
            An updated fasta object with ".fai", ".bwt" and ".dict" generated.
            
        '''
        self.samtools_index_fa()
        self.bwa_index_fa()
        pcd = picard(jar=jar_path)
        self.picard_index = pcd.dict( fa=self.path,dictionary=None )
        
        return self


# def get_ref(ftp, md5, dir='.'):
#     """ download reference files from NCBI and perform md5sumcheck to files
#     :param ftp: ftp URL
#     :param md5: file that contains md5checksum results for
#     :param dir: destination directory
#     """
#     wget[ftp, dir]()
#     if md5:
#         with open(md5, 'r') as tsv:
#             for line in tsv:
#                 checksum, file = line.strip().split()
#                 check_md5(file, checksum)

