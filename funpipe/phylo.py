import sys
import os
sys.path.append('.')
from utils import run
from fasta import fasta
from vcf import vcf

class phylo:
    def __init__(self, invcf ):
        """constructor of phylo object
        
        Parameters
        ----------
        invcf: string
            input vcf file
            
        Attributes
        ----------
        invcf: string
            path to input vcf file
        prefix: string
            prefix of output files
        snp_fasta: string
            path to fasta containing SNPs
        pairsnp: string
            path to pairwise SNPs overlap amongst a list of fasta
        phylip: string
            path to phylip file 
        fast_tree: string
            path to newick tree generated by FastTree
        raxml_result: list
            path to output of raxml
        phyml_result: list
            path to output of phyml
            
        """
        
        self.snp_fasta = None
#        self.pairsnp = None
        self.phylip = None
        self.raxml_result = None
        self.fast_tree = None
        self.phyml_result = None
        
        if os.path.exists( invcf ):
            self.invcf = invcf
        else:
            raise Exception('Sorry, input VCF list file does not exist')
            
        self.prefix = os.path.splitext( os.path.basename( self.invcf )  )[0]
        
    def vcf_snp_to_fasta(self, max_amb=10):
        """ snp only vcf to fasta file

        Parameters
        ----------
        max_amb: int
            maximum number of samples with ambiguous calls for a site
            to be included, recommended number of samples 10%, use
            a very large number to disable this function 100000 (
            legacy options and will not be maintained.)
            
        Returns
        -------
        funpipe.phylo
            an updated phylo object with fasta file containing SNPs generated.
            
        """
        run("echo "+ self.invcf + " > temp.txt")
        cmd = ' '.join([ 'vcf_snp_to_fasta.py', '--max_amb_samples', str(max_amb), 'temp.txt', '>',
                       self.prefix+'.snp.fasta'])
        run(cmd)
        run("rm temp.txt")
        self.snp_fasta = self.prefix+'.snp.fasta'
        
        return self

#TODO
#    def pairwise_snp_counts(self, fas, out_tsv):
#        """ calculate pairwise SNPs overlap amongst a list of fasta using multiple
#        alignment

#         Parameters
#         ----------
#         fas: list
#             a list of fasta files
#         out_tsv: str
#             output path of the pairwise SNP matrix
            
#         Returns
#         -------
#         funpipe.phylo
#             an updated phylo object with pairwise SNPs calculated.
            
#         """
#         cmd = ' '.join([])
#         run(cmd)
#         self.pairsnp = out_tsv
#         return self

    def fa2phylip(self, jar='/opt/readseq/readseq.jar' ):
        ''' convert SNP fasta file to phylip file
        
        Parameters
        ----------
        jar: string
            path to readseq.jar
            
        Returns
        -------
        funpipe.phylo
            an updated phylo object with SNP phylip file converted from SNP fasta file.
            
        '''
        if self.snp_fasta == None:
            self.vcf_snp_to_fasta()
            
        cmd = ' '.join(['java -cp', jar, 'run -f 12', self.snp_fasta])
        run(cmd)
        self.phylip = os.path.splitext( self.snp_fasta )[0] + '.phy'
        
        return self


    def raxml(self, threads=4):
        ''' Run RAxML:A tool for Phylogenetic Analysis and Post-Analysis of Large Phylogenies
        
        Parameters
        ----------
        threads: int
            number of threads used, default = 4
        
        Returns
        -------
        funpipe.phylo
            an updated phylo object with ML tree generarted.
            
        '''
        out_dir = os.path.dirname(self.phylip)
        cmd = ' '.join([
            'raxmlHPC-PTHREADS-SSE3 -p 78960 -f a -x 12345 -N 1000 -m GTRCAT',
            '-T', str(threads), '-n', postfix, '-s', self.phylip])
        run(cmd)
        
        self.raxml_result = [os.path.join(out_dir,'RAxML_bootstrap.'+ self.prefix ),
                            os.path.join(out_dir,'RAxML_bestTree.' + self.prefix ),
                            os.path.join(out_dir,'RAxML_bipartitions.' + self.prefix ),
                            os.path.join(out_dir,'RAxML_bipartionsBranchLabels.' + self.prefix ) ]
        
        return output


    def fasttree(self):
        ''' Run FastTree: create phylogenetic trees from alignments of sequences.
        
        Returns
        -------
        funpipe.phylo
            an updated phylo object with phylogenetic tree generated.
            
        '''
        cmd = ' '.join([
            'FastTree -nt', self.snp_fasta, '>', self.prefix +'.nwk'
        ])
        run(cmd)
        self.fast_tree = self.prefix +'.nwk'
        
        return self


#    def FastTreeDP(self, in_fa, out_prefix):
#        ''' perform FastaTreeDP analysis
#        
#        Parameters
#        ----------
#        in_fa: string
#            input fasta file
#        :param out_prefix: output file prefix
#        :returns nwk file
#        '''
#        out_nwk = out_prefix+'.nwk'
#        cmd = 'FastTreeDP -nt '+in_fa+' > ' + out_nwk
#        run(cmd)
#        return out_nwk

    def phyml(self):
        """ Phylogenetic tree with parsimonies.
        Estimates maximum likelihood phylogenies from 
        alignments of nucleotide or amino acid sequences.
        
        Returns
        -------
        funpipe.phylo
            an updated phylo object with maximum likelihood phylogenetic tree generated.
            
        """
        out_dir = os.path.dirname(self.phylip)
        cmd = ' '.join([
            'phyml -i', self.phylip
        ])
        
        self.phyml_result = [os.path.join(out_dir,self.phylip + '_phyml_tree.txt'),
                             os.path.join(out_dir,self.phylip + '_phyml_boot_stats.txt'),
                             os.path.join(out_dir,self.phylip + '_phyml_boot_trees.txt'),
                             os.path.join(out_dir,self.phylip + '_phyml_stats.txt')  ]
        
        return self
